using SLZ.Marrow.Data;
using TMPro;
using UnityEngine;

namespace LabWorks.Bonelab
{
	public class Control_MonoMat : Powerable
	{
		[SerializeField]
		private Rigidbody[] _loots;

		[SerializeField]
		private Control_PowerLever _doorLever;

		[SerializeField]
		private Powerable _doorMotor;

		[SerializeField]
		private int _multiplier;

		[SerializeField]
		private int _itemPrice;

		[SerializeField]
		private int _lightBullets;

		[SerializeField]
		private int _mediumBullets;

		[SerializeField]
		private int _heavyBullets;

		[SerializeField]
		private bool _opened;

		[SerializeField]
		private bool _unlocked;

		[SerializeField]
		private TextMeshProUGUI _bulletBalanceTextmesh;

		[SerializeField]
		private TextMeshProUGUI _refundTextmesh;

		[SerializeField]
		private AmmoReciever reciever;

		[SerializeField]
		private Spawnable lightRefundSpawnable;

		[SerializeField]
		private Spawnable mediumRefundSpawnable;

		[SerializeField]
		private Spawnable heavyRefundSpawnable;

		[SerializeField]
		private AudioClip _openedClip;

		[SerializeField]
		private AudioClip _unlockedClip;

		[SerializeField]
		private AudioClip _lockedClip;

		public Transform giveChangeTransform;

		private void Start()
		{
            reciever.OnInsert += InsertMagazine;
            _bulletBalanceTextmesh = (_itemPrice * _multiplier);
		}

		public void GiveChange()
		{
            if(_lightBullets > 0)
            {
                AssetSpawner.SpawnAsync(lightRefundSpawnable, giveChangeTransform.position, giveChangeTransform.rotation, Vector3.one);
            }
            if(_mediumBullets > 0)
            {
                AssetSpawner.SpawnAsync(mediumRefundSpawnable, giveChangeTransform.position, giveChangeTransform.rotation, Vector3.one);
            }
            if(_heavyBullets > 0)
            {
                AssetSpawner.SpawnAsync(heavyRefundSpawnable, giveChangeTransform.position, giveChangeTransform.rotation, Vector3.one);
            }

            _lightBullets = 0;
            _mediumBullets = 0;
            _heavyBullets = 0;
		}

		private void CleanupLight()
		{
            
		}

		private void CleanupMedium()
		{
		}

		private void CleanupHeavy()
		{
		}

		public void InsertMagazine(Magazine magazine)
		{
            AddBullets(magazine.magazineState.AmmoCount, 0)
		}

		public void AddBullets(int addedBullets, int type)
		{
            if(type == 0)
            {
                _lightBullets += addedBullets;
            }
            else if(type == 1)
            {
                _mediumBullets += addedBullets;
            }
            else if(type == 1)
            {
                _heavyBullets += addedBullets;
            }

            _bulletBalanceTextmesh.text = Mathf.Max(_itemPrice * _multiplier - (_lightBullets + _mediumBullets + _heavyBullets), 0f);
            _refundTextmesh.text = (_lightBullets + _mediumBullets + _heavyBullets);

		}

		public Rigidbody[] GetLoots()
		{
			return null;
		}

		public void SetPrice(int price, int mult)
		{
            _itemPrice = price;
            _multiplier = mult;
		}

		public void SetLoots(Rigidbody[] loots)
		{
		}
	}
}